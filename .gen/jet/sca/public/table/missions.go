//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Missions = newMissionsTable("public", "missions", "")

type missionsTable struct {
	postgres.Table

	// Columns
	ID     postgres.ColumnString
	Status postgres.ColumnString
	CatID  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MissionsTable struct {
	missionsTable

	EXCLUDED missionsTable
}

// AS creates new MissionsTable with assigned alias
func (a MissionsTable) AS(alias string) *MissionsTable {
	return newMissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MissionsTable with assigned schema name
func (a MissionsTable) FromSchema(schemaName string) *MissionsTable {
	return newMissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MissionsTable with assigned table prefix
func (a MissionsTable) WithPrefix(prefix string) *MissionsTable {
	return newMissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MissionsTable with assigned table suffix
func (a MissionsTable) WithSuffix(suffix string) *MissionsTable {
	return newMissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMissionsTable(schemaName, tableName, alias string) *MissionsTable {
	return &MissionsTable{
		missionsTable: newMissionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newMissionsTableImpl("", "excluded", ""),
	}
}

func newMissionsTableImpl(schemaName, tableName, alias string) missionsTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		StatusColumn   = postgres.StringColumn("status")
		CatIDColumn    = postgres.StringColumn("cat_id")
		allColumns     = postgres.ColumnList{IDColumn, StatusColumn, CatIDColumn}
		mutableColumns = postgres.ColumnList{StatusColumn, CatIDColumn}
	)

	return missionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Status: StatusColumn,
		CatID:  CatIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
