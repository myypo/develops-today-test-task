//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Cats = newCatsTable("public", "cats", "")

type catsTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnString
	Name              postgres.ColumnString
	YearsOfExperience postgres.ColumnInteger
	Breed             postgres.ColumnString
	SalaryInCents     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CatsTable struct {
	catsTable

	EXCLUDED catsTable
}

// AS creates new CatsTable with assigned alias
func (a CatsTable) AS(alias string) *CatsTable {
	return newCatsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CatsTable with assigned schema name
func (a CatsTable) FromSchema(schemaName string) *CatsTable {
	return newCatsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CatsTable with assigned table prefix
func (a CatsTable) WithPrefix(prefix string) *CatsTable {
	return newCatsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CatsTable with assigned table suffix
func (a CatsTable) WithSuffix(suffix string) *CatsTable {
	return newCatsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCatsTable(schemaName, tableName, alias string) *CatsTable {
	return &CatsTable{
		catsTable: newCatsTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newCatsTableImpl("", "excluded", ""),
	}
}

func newCatsTableImpl(schemaName, tableName, alias string) catsTable {
	var (
		IDColumn                = postgres.StringColumn("id")
		NameColumn              = postgres.StringColumn("name")
		YearsOfExperienceColumn = postgres.IntegerColumn("years_of_experience")
		BreedColumn             = postgres.StringColumn("breed")
		SalaryInCentsColumn     = postgres.IntegerColumn("salary_in_cents")
		allColumns              = postgres.ColumnList{IDColumn, NameColumn, YearsOfExperienceColumn, BreedColumn, SalaryInCentsColumn}
		mutableColumns          = postgres.ColumnList{NameColumn, YearsOfExperienceColumn, BreedColumn, SalaryInCentsColumn}
	)

	return catsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Name:              NameColumn,
		YearsOfExperience: YearsOfExperienceColumn,
		Breed:             BreedColumn,
		SalaryInCents:     SalaryInCentsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
